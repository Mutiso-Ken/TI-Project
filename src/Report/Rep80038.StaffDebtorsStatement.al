#pragma warning disable AA0005, AA0008, AA0018, AA0021, AA0072, AA0137, AA0201, AA0204, AA0206, AA0218, AA0228, AL0254, AL0424, AS0011, AW0006 // ForNAV settings
Report 80038 "Staff Debtors Statement"
{
    WordLayout = 'Layouts/StaffDebtorsStatement.docx';
    DefaultLayout = Word;

    dataset
    {
        dataitem(Customer; Customer)
        {
            RequestFilterFields = "No.";
            column(ReportForNavId_83; 83) { } // Autogenerated by ForNav - Do not delete
            column(ReportForNav_Customer; ReportForNavWriteDataItem('Customer', Customer)) { }
            dataitem("Cust. Ledger Entry"; "Cust. Ledger Entry")
            {
                CalcFields = Amount, "Amount (LCY)", "Remaining Amount", "Remaining Amt. (LCY)";
                DataItemLink = "Customer No." = field("No.");
                RequestFilterFields = "Posting Date";
                column(ReportForNavId_1102755000; 1102755000) { } // Autogenerated by ForNav - Do not delete
                column(ReportForNav_CustLedgerEntry; ReportForNavWriteDataItem('CustLedgerEntry', "Cust. Ledger Entry")) { }
                column(CustomerNo_CustLedgerEntry; "Cust. Ledger Entry"."Customer No.")
                {
                }
                column(PostingDate_CustLedgerEntry; "Cust. Ledger Entry"."Posting Date")
                {
                }
                column(DocumentNo_CustLedgerEntry; "Cust. Ledger Entry"."Document No.")
                {
                }
                column(Description_CustLedgerEntry; "Cust. Ledger Entry".Description)
                {
                }
                column(RemainingAmtLCY_CustLedgerEntry; "Cust. Ledger Entry"."Remaining Amt. (LCY)")
                {
                }
                column(AmountLCY_CustLedgerEntry; "Cust. Ledger Entry"."Amount (LCY)")
                {
                }
                column(CompanyINfoName; CompanyINfo.Name)
                {
                }
                column(CompanyINfoAdd; CompanyINfo.Address)
                {
                }
                column(CompanyINfoPicture; CompanyINfo.Picture)
                {
                }
                column(CustName; CustName)
                {
                }
                column(Sdate; "Surrender date")
                {
                }
                column(Sdno; "Surender document No")
                {
                }
                column(Surrenderdesc; Surrenderdesc)
                {
                }
                column(issued; issued)
                {
                }
                column(surrendered; surrendered)
                {
                }
                trigger OnPreDataItem();
                begin

                end;

                trigger OnAfterGetRecord();
                begin
                    Surrenderdesc := '';
                    "Surrender Amt" := 0;
                    //IF "Cust. Ledger Entry".Amount<0 THEN CurrReport.SKIP;
                    //IF "Cust. Ledger Entry".Reversed=TRUE THEN CurrReport.SKIP;
                    CustName := '';
                    if Customer2.Get("Cust. Ledger Entry"."Customer No.") then
                        CustName := Customer.Name;
                    if CustLedgerEntry.Get("Cust. Ledger Entry"."Closed by Entry No.") then begin
                        "Surender document No" := CustLedgerEntry."Document No.";
                        CustLedgerEntry.CalcFields("Amount (LCY)");
                        "Surrender Amt" := CustLedgerEntry."Amount (LCY)";
                        "Surrender date" := CustLedgerEntry."Posting Date";
                        Surrenderdesc := CustLedgerEntry.Description;
                    end;
                    CustLedgerEntry.Reset;
                    CustLedgerEntry.SetRange("Customer No.", "Cust. Ledger Entry"."Customer No.");
                    if CustLedgerEntry.FindSet then begin
                        repeat
                            CustLedgerEntry.CalcFields("Amount (LCY)");
                            if CustLedgerEntry."Amount (LCY)" > 0 then
                                issued := issued + CustLedgerEntry."Amount (LCY)";
                            if CustLedgerEntry."Amount (LCY)" < 0 then
                                surrendered := surrendered + CustLedgerEntry."Amount (LCY)";
                        until CustLedgerEntry.Next = 0
                    end;
                    //IF "Cust. Ledger Entry"."Remaining Amount"=0 THEN
                end;

            }
            trigger OnPreDataItem();
            begin

            end;

            trigger OnAfterGetRecord();
            begin
                issued := 0;
                surrendered := 0;
            end;

        }
    }
    requestpage
    {
        SaveValues = false;
        layout
        {
        }

    }

    trigger OnPreReport()
    begin
        CompanyINfo.Get;
        CompanyINfo.CalcFields(Picture);
        SNo := 0;
        Dim1Name := '';
        Dim2Name := '';
        ;
        ReportsForNavPre;

    end;

    var
        CompanyINfo: Record "Company Information";
        Inventory: Decimal;
        SNo: Integer;
        Item: Record Item;
        DimVal: Record "Dimension Value";
        Dim1Name: Text;
        Dim2Name: Text;
        "Surrender date": Date;
        "Surrender Amt": Decimal;
        "Surender document No": Code[10];
        CustLedgerEntry: Record "Cust. Ledger Entry";
        Customer2: Record Customer;
        CustName: Text;
        Surrenderdesc: Text;
        issued: Decimal;
        surrendered: Decimal;

    trigger OnInitReport();
    begin
        ;

    end;



    local procedure ReportsForNavInit()
    var
        id: Integer;
        FormatRegion: Text;
    begin
        Evaluate(id, CopyStr(CurrReport.ObjectId(false), StrPos(CurrReport.ObjectId(false), ' ') + 1));

    end;

    local procedure ReportsForNavPre()
    begin
    end;

    local procedure ReportForNavSetTotalsCausedBy(value: Integer)
    begin

    end;

    local procedure ReportForNavSetShowOutput(value: Boolean)
    begin

    end;

    local procedure ReportForNavInit(jsonObject: JsonObject)
    begin

    end;

    local procedure ReportForNavWriteDataItem(dataItemId: Text; rec: Variant): Text
    var
        values: Text;
        jsonObject: JsonObject;
        currLanguage: Integer;
    begin


        case (dataItemId) of
            'Customer':
                begin
                    currLanguage := GlobalLanguage;
                    GlobalLanguage := 1033;
                    jsonObject.Add('DataItem$Customer$CurrentKey$Text', Customer.CurrentKey);
                    GlobalLanguage := currLanguage;
                end;
            'CustLedgerEntry':
                begin
                    currLanguage := GlobalLanguage;
                    GlobalLanguage := 1033;
                    jsonObject.Add('DataItem$CustLedgerEntry$CurrentKey$Text', "Cust. Ledger Entry".CurrentKey);
                    GlobalLanguage := currLanguage;
                end;
        end;

        jsonObject.WriteTo(values);
        exit(values);
    end;
    // Reports ForNAV Autogenerated code - do not delete or modify -->
}
