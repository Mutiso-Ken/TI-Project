#pragma warning disable AA0005, AA0008, AA0018, AA0021, AA0072, AA0137, AA0201, AA0204, AA0206, AA0218, AA0228, AL0254, AL0424, AS0011, AW0006 // ForNAV settings
Report 80005 "Paye Schedule_AU"
{
    UsageCategory = ReportsAndAnalysis;
    RDLCLayout = 'Layouts/Paye Schedule_AU.rdlc';
    DefaultLayout = RDLC;

    dataset
    {
        dataitem("Payroll Employee_AU"; "Payroll Employee_AU")
        {
            DataItemTableView = where(Status = const(Active));
            RequestFilterFields = "Period Filter", "No.";
            column(ReportForNavId_6207; 6207) { } // Autogenerated by ForNav - Do not delete
            column(ReportForNav_PayrollEmployee_AU; ReportForNavWriteDataItem('PayrollEmployee_AU', "Payroll Employee_AU")) { }
            column(PeriodName; PeriodName)
            {
            }
            column(companyinfo_Picture; companyinfo.Picture)
            {
            }
            column(Pic; companyinfo.Picture)
            {
            }
            column(prSalary_Card__prSalary_Card___Employee_Code_; "Payroll Employee_AU"."No.")
            {
            }
            column(EmployeeName; EmployeeName)
            {
            }
            column(PinNumber; PinNumber)
            {
            }
            column(PayeAmount; PayeAmount)
            {
            }
            column(TaxablePay; TaxablePay)
            {
            }
            column(User_Name_Caption; User_Name_CaptionLbl)
            {
            }
            column(Print_Date_Caption; Print_Date_CaptionLbl)
            {
            }
            column(P_A_Y_E_ScheduleCaption; P_A_Y_E_ScheduleCaptionLbl)
            {
            }
            column(Period_Caption; Period_CaptionLbl)
            {
            }
            column(Page_No_Caption; Page_No_CaptionLbl)
            {
            }
            column(No_Caption; No_CaptionLbl)
            {
            }
            column(Employee_NameCaption; Employee_NameCaptionLbl)
            {
            }
            column(PIN_Number_Caption; PIN_Number_CaptionLbl)
            {
            }
            column(Paye_Amount_Caption; Paye_Amount_CaptionLbl)
            {
            }
            column(Taxable_Pay_Caption; Taxable_Pay_CaptionLbl)
            {
            }
            trigger OnPreDataItem();
            begin
                if companyinfo.Get() then
                    companyinfo.CalcFields(companyinfo.Picture);
                CompName := companyinfo.Name;
                Addr1 := companyinfo.Address;
                Addr2 := companyinfo.City;
                Email := companyinfo."E-Mail";
                TotPayeAmount := 0;
                TotTaxablePay := 0;

            end;

            trigger OnAfterGetRecord();
            begin
                PayeAmount := 0; // Inserted by ForNAV
                TaxablePay := 0; // Inserted by ForNAV
                PayeAmount := 0;
                TaxablePay := 0;
                objEmp.Reset;
                objEmp.SetRange(objEmp."No.", "No.");
                if objEmp.Find('-') then
                    EmployeeName := '';
                EmployeeName := objEmp.Firstname + ' ' + objEmp.Lastname + ' ' + objEmp.Surname;
                PinNumber := objEmp."PIN No";
                PeriodTrans.Reset;
                PeriodTrans.SetRange(PeriodTrans."No.", "No.");
                PeriodTrans.SetRange(PeriodTrans."Payroll Period", SelectedPeriod);
                if PeriodTrans.Find('-') then
                    repeat
                        //TXBP Taxable Pay -  BY DENNIS
                        if (PeriodTrans."Transaction Code" = 'TXBP') then begin
                            TaxablePay := PeriodTrans.Amount;
                        end;
                        //GrpOrder 7, SubGrpOrder 3 = Taxable Pay
                        if (PeriodTrans.Grouping = 7) and (PeriodTrans.SubGrouping = 3) then begin
                            PayeAmount := PeriodTrans.Amount;
                        end;
                    until PeriodTrans.Next = 0;
                if PayeAmount <= 0 then
                    CurrReport.Skip;
                objEmp.Reset;
                objEmp.SetRange(objEmp."No.", "No.");
                if objEmp.Find('-') then begin
                    repeat
                        TotPayeAmount := TotPayeAmount + PayeAmount;
                        TotTaxablePay := TotTaxablePay + TaxablePay;
                    until objEmp.Next = 0;
                end;
            end;

        }
    }
    requestpage
    {
        SaveValues = false;
        layout
        {
            area(Content)
            {
                field(periodfilter; PeriodFilter)
                {
                    ApplicationArea = Basic;
                    Caption = 'Period Filter';
                    TableRelation = "Payroll Calender_AU"."Date Opened";
                }

            }
        }

    }

    trigger OnInitReport()
    begin
        objPeriod.Reset;
        objPeriod.SetRange(objPeriod.Closed, false);
        if objPeriod.Find('-') then;
        PeriodFilter := objPeriod."Date Opened";
        ;
        ReportsForNavInit;

    end;

    trigger OnPreReport()
    begin
        if UserSetup.Get(UserId) then begin
            if UserSetup."View Payroll" = false then Error('You dont have permissions for payroll, Contact your system administrator! ')
        end else begin
            Error('You have been setup in the user setup!');
        end;
        //PeriodFilter:="prSalary Card".GETFILTER("Period Filter");
        if PeriodFilter = 0D then Error('You must specify the period filter');
        SelectedPeriod := PeriodFilter;
        objPeriod.Reset;
        if objPeriod.Get(SelectedPeriod) then PeriodName := objPeriod."Period Name";
        if companyinfo.Get() then
            companyinfo.CalcFields(companyinfo.Picture);
        ;
        ReportsForNavPre;

    end;

    var
        UserSetup: Record "User Setup";
        PeriodTrans: Record "Payroll Monthly Trans_AU";
        PayeAmount: Decimal;
        TotPayeAmount: Decimal;
        TaxablePay: Decimal;
        TotTaxablePay: Decimal;
        EmployeeName: Text[150];
        PinNumber: Text[30];
        objPeriod: Record "Payroll Calender_AU";
        objEmp: Record "Payroll Employee_AU";
        SelectedPeriod: Date;
        PeriodName: Text[30];
        PeriodFilter: Date;
        companyinfo: Record "Company Information";
        User_Name_CaptionLbl: label 'User Name:';
        Print_Date_CaptionLbl: label 'Print Date:';
        P_A_Y_E_ScheduleCaptionLbl: label 'P.A.Y.E Schedule';
        Period_CaptionLbl: label 'Period:';
        Page_No_CaptionLbl: label 'Page No:';
        No_CaptionLbl: label 'No:';
        Employee_NameCaptionLbl: label 'Employee Name';
        PIN_Number_CaptionLbl: label 'PIN Number:';
        Paye_Amount_CaptionLbl: label 'Paye Amount:';
        Taxable_Pay_CaptionLbl: label 'Taxable Pay:';
        Prepared_by_______________________________________Date_________________CaptionLbl: label 'Prepared by……………………………………………………..				 Date……………………………………………';
        Checked_by________________________________________Date_________________CaptionLbl: label 'Checked by…………………………………………………..				   Date……………………………………………';
        Totals_CaptionLbl: label 'Totals:';
        Authorized_by____________________________________Date_________________CaptionLbl: label 'Authorized by……………………………………………………..			  Date……………………………………………';
        Approved_by______________________________________Date_________________CaptionLbl: label 'Approved by……………………………………………………..				Date……………………………………………';
        CompName: Text[50];
        Addr1: Text[50];
        Addr2: Text[50];
        Email: Text[50];

    // --> Reports ForNAV Autogenerated code - do not delete or modify
    var

        ReportForNavTotalsCausedBy: Integer;
        ReportForNavInitialized: Boolean;
        ReportForNavShowOutput: Boolean;

    local procedure ReportsForNavInit()
    var
        id: Integer;
        FormatRegion: Text;
    begin
        Evaluate(id, CopyStr(CurrReport.ObjectId(false), StrPos(CurrReport.ObjectId(false), ' ') + 1));

    end;

    local procedure ReportsForNavPre()
    begin
    end;

    local procedure ReportForNavSetTotalsCausedBy(value: Integer)
    begin
        ReportForNavTotalsCausedBy := value;
    end;

    local procedure ReportForNavSetShowOutput(value: Boolean)
    begin

    end;

    local procedure ReportForNavInit(jsonObject: JsonObject)
    begin

    end;

    local procedure ReportForNavWriteDataItem(dataItemId: Text; rec: Variant): Text
    var
        values: Text;
        jsonObject: JsonObject;
        currLanguage: Integer;
    begin
        if not ReportForNavInitialized then begin
            ReportForNavInit(jsonObject);
            ReportForNavInitialized := true;
        end;

        case (dataItemId) of
            'PayrollEmployee_AU':
                begin
                    currLanguage := GlobalLanguage;
                    GlobalLanguage := 1033;
                    jsonObject.Add('DataItem$PayrollEmployee_AU$CurrentKey$Text', "Payroll Employee_AU".CurrentKey);
                    GlobalLanguage := currLanguage;
                end;
        end;

        jsonObject.WriteTo(values);
        exit(values);
    end;
    // Reports ForNAV Autogenerated code - do not delete or modify -->
}
